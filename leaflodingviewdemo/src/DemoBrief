这是叶子旋转加载的Demo

一、制作步骤：
1、绘制背景边框，并显示在屏幕中央
2、绘制进图条的半圆
(遇到的问题：边框的边缘线条大小无法确定，只能固定全屏时候的大小，半圆的半径也无法确定)
3、绘制整个矩形，并进行测试是否正确
4、首先定义叶子的属性，创建叶子的javaBean
5、创建叶子工厂。
6、设置叶子的可调节选项（比如说：叶子飘动的时间，旋转的时间）设置默认值和接口。
7、设置叶子x,y的位置。（x由消耗的时间来确定，y由公式y = A * sin(w * x + α) + h来确定）
8、设置叶子的旋转角度（也是根据时间和旋转方向来判断）
9、通过Matrix设置旋转然后绘制叶子的图形
10、添加风扇(步骤同：7、8、9)
11、添加进度条的百分比显示
12、当达到100%的时候停止绘制

二、制作遇到的问题：
1、基本类型的类型转换和在运算的时候的转换的问题
比如说：long time  和 float tolTime
float fraction = time/tolTime; //返回的值是0而不是百分比

2、Random函数的 nextXxx(3)获得的数字范围是[0,2]还是[1,3]

3、Matrix的使用，及其原理。（在LeafView中，我将画布的中心转换了，那么Matrix是否会叠加的问题）

三、自己做的时候，与其不同的想法：
1、融合叶子和进度条的问题
我的想法是当进度条与叶子碰撞的时候，融合，并且之后删除叶子，当设置的时候再添加
作者的方法是，进度条与叶子不相关，看上去像融合就可以了。 并且复用容器中的叶子对象。

2、刷新View的问题
我使用Handle刷新。
作者直接在draw()方法中调用postInvalidate()方法。

四、增加的功能（跟作者的代码相比）
1、将风扇放到了LeafLoadingView中而不是提取出来，放到Layout中，使用动画展现
2、添加了进度条的百分比
3、修改了绘制条件（当0%不使用的时候不绘制，当100%的时候停止绘制，不用一直绘制占用内存）

五、未修复的问题
由于背景叶子风扇等都是图片，所以无法为其他分辨率进行适配~~